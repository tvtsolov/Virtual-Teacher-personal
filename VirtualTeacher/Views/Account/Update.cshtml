@model AccountUpdateViewModel;

@{
    ViewData["Title"] = "Profile Info";
}

<style>
    .circle-avatar-container {
        position: relative;
        width: 100px;
        height: 100px;
        margin: 0 auto 15px auto;
    }

    .btn-change-avatar {
        position: absolute;
        bottom: 0px;
        right: -5px;
        border: none;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 50%;
        padding: 0;
        cursor: pointer;
        outline: none;
        width: 30px;
        height: 30px;
        object-fit: cover;
    }

    .btn-change-avatar:hover {
        background: rgba(0, 0, 0, 0.5);
    }

    .btn-change-avatar i {
        color: white;
        font-size: 16px;
    }

</style>

<div style="max-width: 350px; margin: auto">
    <form asp-controller="Account" asp-action="Update" method="post">

        <div class="circle-avatar-container">
            <img class="circle-avatar" src="~/@Model.AvatarUrl" alt=""/>

            <!-- Change Avatar Icon Button -->
            <input type="file" id="avatarInput" style="display: none;" accept=".jpg"/>
            <button type="button" class="btn-change-avatar" id="changeAvatarButton" aria-label="Change Avatar">
                <i class="fa-regular fa-image"></i>
            </button>
        </div>


        <h3 style="margin: 0 auto 20px auto; text-align: center">@Model.Username</h3>

        <div class="form-floating mb-3">
            <input asp-for="FirstName" type="text" class="form-control" id="floatingFirstName" placeholder="First Name" required>
            <label asp-for="FirstName" for="floatingFirstName">First Name</label>
            <span asp-validation-for="FirstName" class="text-danger"></span>
        </div>

        <div class="form-floating mb-3">
            <input asp-for="LastName" type="text" class="form-control" id="floatingLastName" placeholder="Last Name" required>
            <label asp-for="LastName">Last Name</label>
            <span asp-validation-for="LastName" class="text-danger"></span>
        </div>

        <div class="form-floating mb-3">
            <input asp-for="Email" type="email" class="form-control" placeholder="Email" required>
            <label asp-for="Email">Email</label>
            <span asp-validation-for="Email" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary" style="margin: 25px auto 0 auto; display: block; width: 100%">
            <i class="fa-regular fa-pen-to-square"></i> Update Profile
        </button>
    </form>


    <!-- Delete Account Button -->
    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteAccountModal" style="margin: 15px auto 0 auto; display: block; width: 100%">
        <i class="fa-regular fa-trash-can"></i> Delete Account
    </button>
</div>


<!-- Delete Account Confirmation Modal -->
<div class="modal fade" id="deleteAccountModal" tabindex="-1" aria-labelledby="deleteAccountModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteAccountModalLabel">Delete Account</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete your account?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Notification Pop-up -->
<div id="notificationPopup" class="alert" role="alert" style="display: none; position: fixed; bottom: 20px; right: 20px; width: auto; max-width: 450px; z-index: 9999; box-shadow: 0 4px 8px rgba(0,0,0,0.1); padding-right: 15px; background: #a94442; color: white; border-radius: 4px;">
    <span id="notificationMessage" style="display: inline-block; max-width: 80%;"></span>
    <button id="closeNotification" style="display: inline-block; width: 20px; height: 20px; line-height: 20px; text-align: center; margin-left: 10px; border: none; background: none; color: white; float: right;">
        <i class="fa-solid fa-xmark"></i>
    </button>
</div>

@* upload avatar *@
<script>
document.getElementById('changeAvatarButton').addEventListener('click', function() {
    document.getElementById('avatarInput').click();
});

document.getElementById('avatarInput').addEventListener('change', function(event) {
    if (event.target.files.length > 0) {
        let formData = new FormData();
        formData.append('avatarFile', event.target.files[0]);

        fetch('/Account/ChangeAvatar', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            let notificationPopup = document.getElementById('notificationPopup');
            let notificationMessage = document.getElementById('notificationMessage');

            if (data.success) {
                let avatarImage = document.querySelector('.circle-avatar');
                let imageUrl = '/images/avatars/' + data.fileName;

                // Instead of appending a query string, fetch the image and create a blob URL
                fetch(imageUrl, {cache: "no-cache"}) // Use no-cache to force fetch to ignore cache
                .then(response => response.blob())
                .then(blob => {
                    // Create a blob URL and use it as the src to bypass cache
                    let blobUrl = URL.createObjectURL(blob);
                    avatarImage.src = blobUrl;
                })
                .catch(error => {
                    console.error('Error fetching the new avatar image:', error);
                });

                notificationPopup.classList.remove('alert-danger');
                notificationPopup.classList.add('alert-success');
                notificationPopup.style.backgroundColor = '#3c763d';
                notificationMessage.innerHTML = 'Avatar updated successfully.';
                notificationPopup.style.display = 'block';
            } else {
                notificationPopup.classList.remove('alert-success');
                notificationPopup.classList.add('alert-danger');
                notificationPopup.style.backgroundColor = '#a94442';
                notificationMessage.textContent = data.errorMessage;
                notificationPopup.style.display = 'block';
            }

            setTimeout(function() {
                notificationPopup.style.display = 'none';
            }, 4000);
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }
});

document.getElementById('closeNotification').addEventListener('click', function() {
    let notificationPopup = document.getElementById('notificationPopup');
    notificationPopup.style.display = 'none';
});

</script>


@* delete account *@
<script>
document.getElementById('confirmDelete').addEventListener('click', function() {
    fetch('/Account/Delete', { method: 'GET' })
        .then(response => response.json())
        .then(({ success, errorMessage }) => {

            let notificationPopup = document.getElementById('notificationPopup');
            let notificationMessage = document.getElementById('notificationMessage');
            notificationPopup.style.display = 'block';
            notificationPopup.style.bottom = '20px';
            notificationPopup.style.right = '20px';

            if (success) {
                notificationPopup.classList.add('alert-success');
                notificationPopup.style.backgroundColor = '#3c763d';
                notificationMessage.innerHTML = 'Account deleted successfully.<br>Redirecting to home page in 5 seconds...';

                let countdown = 5;
                let intervalId = setInterval(() => {
                    countdown--;

                if (countdown <= 0) {
                    clearInterval(intervalId);
                    window.location.href = '/Home/Index';
                } else {
                    notificationMessage.innerHTML = 'Account deleted successfully.<br>Redirecting to home page in ' + countdown + ' seconds...';
                }
                }, 1000);
            } else {
                notificationPopup.classList.add('alert-danger');
                notificationMessage.textContent = errorMessage;
            }

            let myModal = bootstrap.Modal.getInstance(document.getElementById('deleteAccountModal'));
            myModal.hide();
        });
});

document.getElementById('closeNotification').addEventListener('click', function() {
    let notificationPopup = document.getElementById('notificationPopup');
    notificationPopup.style.display = 'none';
});
</script>