@{
    ViewData["Title"] = "Lecture";
    AvatarHelper avatarHelper = new AvatarHelper();
    string teacherAvatarLocation = avatarHelper.GetAvatar(Model.Teacher.Username);
}

@model Lecture


<style>
    .disabled-section {
        pointer-events: none;
        opacity: 0.5;
    }
</style>

@*COURSE HEADER*@
<div class="d-flex course-header justify-content-between">

    <div class="d-flex flex-column p-2" style="width: 75%">
        <div>
            <h4>
                <img class="language-flag" src="~/images/flags/svgFlags/@(ViewBag.Course.CourseTopic).svg" alt=""/>
                <a asp-controller="Course" asp-action="Details" asp-route-id="@Model.CourseId" style="color: #ffffff">@Model.Course.Title</a>
                <span> > @Model.Title </span>
            </h4>
        </div>

        <div style="margin-bottom: 1px;">
            <i class="fa-regular fa-calendar" style="margin-left:4px; margin-right:1px;"></i> @(ViewBag.Course.StartingDate > DateTime.Now ? ViewBag.Course.StartingDate?.ToString("MMM dd, yyyy") : "Ongoing")
            <i class="fa-regular fa-user" style="margin-left:4px; margin-right: 1px;"></i> @ViewBag.Course.EnrolledStudents.Count
            <i class="fa-regular fa-file" style="margin-left:4px; margin-right: 1px;"></i> @ViewBag.Course.Lectures.Count
        </div>

    </div>

</div>
<br/>

<div class="row" style="padding-left: 12px;">
    @* Embedded video *@
    <div class="card p-2 col-md-9">
        <iframe style="width: 100%; aspect-ratio: 16/9" src="@Model.VideoLink" title="lecture" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

        <div class="card-body">
            <h4 class="card-title">@Model.Description</h4>
            <hr/>
            <div class="d-flex justify-content-between">


                <p class="card-text text-muted">
                    Teacher: 
                    <img class="avatar-small" src="~/images/avatars/@teacherAvatarLocation" alt="avatar" />
                    @Model.Teacher.FirstName @Model.Teacher.LastName
                </p>

                @*UPDATE LECTURE BUTTON*@
                @if (User.Identity is { IsAuthenticated: true } && (User.IsInRole("Admin") || User.IsInRole("Teacher")))
                {
                    <a class="btn btn-success btn-sm" style="height: 30px;" asp-controller="Lecture" asp-action="Update" asp-route-courseId="@Model.CourseId" asp-route-lectureId="@Model.Id">Update Lecture</a>
                }
            </div>
        </div>
    </div>

    @* Lecture menu *@
    <div class="col-md-3">
        <div class="card" style="width: 100%">
            <div class="card-header">
                <div class="d-flex justify-content-between">
                    <strong>Lectures</strong>
                    @{
                        @if (User.Identity is { IsAuthenticated: true } && (User.IsInRole("Admin") || User.IsInRole("Teacher")))

                        {
                            <a class="btn btn-success btn-sm" asp-controller="Lecture" asp-action="Create" asp-route-courseId="@Model.Id">New</a>
                        }
                    }
                </div>
            </div>
            <ul class="list-group list-group-flush" style="max-height: 500px; overflow-y: auto;">
                @{
                    int counter = 1;
                    foreach (var lecture in ViewBag.Course.Lectures)
                    {
                        var activeClass = lecture.Id == Model.Id ? "active" : "";
                        <a asp-controller="Lecture" asp-action="Details" asp-route-courseId="@ViewBag.Course.Id" asp-route-id="@lecture.Id" style="text-decoration:none;">
                            <li class="list-group-item list-group-item-action @activeClass">
                                @counter. @lecture.Title
                            </li>
                        </a>
                        counter++;
                    }
                }
            </ul>
        </div>
    </div>
</div>

@* Notes *@
<div class="d-flex align-items-center mt-4">
    <h3 class="mb-1">Lecture Notes</h3>
    <span class="text-muted ms-2">(only visible to you)</span>
</div>

<div class="mb-5" style="position: relative;">

    <form asp-controller="Lecture" asp-action="SaveNote" asp-route-courseId="@Model.CourseId" asp-route-lectureId="@Model.Id" method="post">
        <div class="form-group">
            <textarea class="form-control" id="noteContent" name="content" rows="6" placeholder="Enter your note here..." style="padding-bottom: 3rem;">@ViewBag.Note</textarea>
            <button type="submit" class="btn btn-primary" style="position: absolute; right: 1rem; bottom: 1rem; z-index: 2;">Save Note</button>
        </div>
    </form>
</div>


<div class="accordion" id="accordionPanelsStayOpenExample">
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">
                Lecture Assignment
            </button>
        </h2>
        <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse show">
            <div class="accordion-body">
                @* Assignment *@
                <div class="mt-1">
                    <div class="row">
                        <div class="col-md-6 mb-1">
                            <h4>Assignment</h4>
                            <div class="d-flex justify-content-start align-items-center">
                                @if (!string.IsNullOrEmpty(Model.AssignmentLink))
                                {
                                    <a href="@Url.Action("GetAssignment", "Lecture", new { courseId = Model.CourseId, lectureId = Model.Id })" class="btn btn-primary me-2">Download Assignment</a>
                                }
                                else
                                {
                                    <p class="me-2">No assignment uploaded.</p>
                                }

                                @if (User.Identity is { IsAuthenticated: true } && (User.IsInRole("Admin") || User.IsInRole("Teacher")))
                                {
                                    if (!string.IsNullOrEmpty(Model.AssignmentLink))
                                    {
                                        <form asp-controller="Lecture" asp-action="DeleteAssignment" asp-route-courseId="@Model.CourseId" asp-route-lectureId="@Model.Id" method="post">
                                            <button type="submit" class="btn btn-danger">Delete Assignment</button>
                                        </form>
                                    }
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            @if (User.Identity is { IsAuthenticated: true }
                                 && (User.IsInRole("Admin") || (User.IsInRole("Teacher") && ViewBag.User.Id == ViewBag.Teacher.Id)))
                            {
                                <h4>Upload Assignment</h4>
                                <form asp-controller="Lecture" asp-action="CreateAssignment" asp-route-courseId="@Model.CourseId" asp-route-lectureId="@Model.Id" method="post" enctype="multipart/form-data">
                                    <div class="d-flex align-items-center">
                                        <div class="mb-3 me-2 flex-grow-1">
                                            <input class="form-control" type="file" id="assignmentUpload" name="file">
                                        </div>
                                        <button type="submit" class="btn btn-primary mb-3" id="uploadAssignmentBtn" disabled>Upload</button>
                                    </div>
                                </form>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="false" aria-controls="panelsStayOpen-collapseTwo">
                Your Submission
            </button>
        </h2>
        <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse">
            <div class="accordion-body">
                @* Submission *@
                <div class="mt-1 @(string.IsNullOrEmpty(Model.AssignmentLink) ? "disabled-section" : "")">
                    <div class="row">
                        <div class="col-md-6 mb-1">
                            <h4>Submission</h4>
                            <div class="d-flex justify-content-start align-items-center">
                                @if (Model.Submissions.Any(s => s.StudentId == ViewBag.User.Id) && !string.IsNullOrEmpty(Model.AssignmentLink))
                                {
                                    <a href="@Url.Action("GetSubmission", "Lecture", new { courseId = Model.CourseId, lectureId = Model.Id })" class="btn btn-primary me-2">Download Submission</a>
                                }
                                else
                                {
                                    <p class="me-2">No submission uploaded.</p>
                                }

                                @if (Model.Submissions.Any(s => s.StudentId == ViewBag.User.Id) && !string.IsNullOrEmpty(Model.AssignmentLink))
                                {
                                    <form asp-controller="Lecture" asp-action="DeleteSubmission" asp-route-courseId="@Model.CourseId" asp-route-lectureId="@Model.Id" method="post">
                                        <button type="submit" class="btn btn-danger">Delete Submission</button>
                                    </form>
                                }
                            </div>
                        </div>

                        <div class="col-md-6">
                            <h4>Upload Submission</h4>
                            <form asp-controller="Lecture" asp-action="CreateSubmission" asp-route-courseId="@Model.CourseId" asp-route-lectureId="@Model.Id" method="post" enctype="multipart/form-data">
                                <div class="d-flex align-items-center">
                                    <div class="mb-3 me-2 flex-grow-1">
                                        <input class="form-control" type="file" id="submissionUpload" name="file">
                                    </div>
                                    <button type="submit" class="btn btn-primary mb-3" id="uploadSubmissionBtn">Upload</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* Comments *@
<div class="mt-5">
    <h3>
        Comments
    </h3>
    @{
        if (Model.Comments.Count == 0)
        {
            <span>No comments</span>
        }
        else
        {
            <ol class="list-group list-group-flush">
                @foreach (var comment in Model.Comments)
                {
                    string avatarLocation = avatarHelper.GetAvatar(comment.Author.Username);

                    <li class="list-group-item d-flex justify-content-between align-items-start">
                        <div class="ms-2 me-auto">
                            <div class="fw-bold">
                                <img class="avatar-small" src="~/images/avatars/@avatarLocation" alt="avatar" />
                                @comment.Author.Username
                            </div>
                            @comment.Content
                        </div>

                        <div class="ms-1">
                            @if (User.Identity is { IsAuthenticated: true } && User.IsInRole("Admin")
                                 || comment.AuthorId == ViewBag.User.Id)
                            {
                                <i class="fa-regular fa-pen-to-square ms-4"> </i>
                                <a href="#" class="text-primary small ms-0 edit-comment-btn" data-bs-toggle="modal"
                                   data-bs-target="#editCommentModal" data-comment-id="@comment.Id" data-comment-content="@comment.Content">
                                    Edit
                                </a>

                                <i class="fa-regular fa-trash-can ms-2"></i>
                                <a href="#" class="text-danger small ms-0 delete-comment-btn"
                                   data-bs-toggle="modal"
                                   data-bs-target="#deleteCommentModal"
                                   data-comment-id="@comment.Id">
                                    Delete
                                </a>
                            }
                        </div>

                        <span class="ms-2 text-muted">
                            <i class="fa-regular fa-calendar"></i>
                            @comment.CreatedOn.ToString("HH:mm tt  MMM-dd-yy")
                        </span>
                    </li>
                }
            </ol>
        }

        <div class="text-end mt-3">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#AddCommentModal">
                Add Comment
            </button>
        </div>
    }
</div>


@*Add Comment MODAL*@
<div class="modal fade" id="AddCommentModal" tabindex="-1" aria-labelledby="AddCommentModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content centered-text">

            <div class="modal-header">
                <h1 class="modal-title fs-5">Add Comment</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="Lecture" asp-action="AddComment" method="post" enctype="multipart/form-data"
                  asp-route-courseId="@Model.CourseId"
                  asp-route-lectureId="@Model.Id">

                <div class="modal-body">
                    <textarea class="form-control" id="addCommentText" name="content" rows="3" required></textarea>
                    <input type="hidden" id="addCommentId" name="CommentId">
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="submit" class="btn btn-primary">Add</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>

        </div>
    </div>
</div>

@*Edit Comment MODAL*@
<div class="modal fade" id="editCommentModal" tabindex="-1" aria-labelledby="editCommentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content centered-text">

            <div class="modal-header">
                <h1 class="modal-title fs-5">Edit Comment</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="Lecture" asp-action="EditComment" method="post" enctype="multipart/form-data"
                  asp-route-courseId="@Model.CourseId"
                  asp-route-lectureId="@Model.Id">

                <div class="modal-body">
                    <textarea class="form-control" id="commentText" name="content" rows="3" required></textarea>
                    <input type="hidden" id="commentId" name="CommentId">
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="submit" class="btn btn-primary">Update</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>

        </div>
    </div>
</div>

@*Delete Comment MODAL*@
<div class="modal fade" id="deleteCommentModal" tabindex="-1" aria-labelledby="deleteCommentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">

            <div class="modal-header">
                <h1 class="modal-title fs-5">Delete Comment</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <form asp-controller="Lecture" asp-action="DeleteComment" method="post"
                  asp-route-courseId="@Model.CourseId"
                  asp-route-lectureId="@Model.Id">

                <div class="modal-body">
                    <p>Are you sure you want to delete this comment?</p>
                    <input type="hidden" id="deleteCommentId" name="commentId" value="">
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="submit" class="btn btn-danger">Delete</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>

        </div>
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function () {
    // Edit comment buttons
    document.querySelectorAll('.edit-comment-btn').forEach(button => {
        button.addEventListener('click', function() {
            const commentId = this.getAttribute('data-comment-id');
            const commentContent = this.getAttribute('data-comment-content');
            document.getElementById('commentId').value = commentId;
            document.getElementById('commentText').value = commentContent;
        });
    });

    // Delete comment buttons with fetch request
    document.querySelectorAll('.delete-comment-btn').forEach(button => {
        button.addEventListener('click', function() {
            const commentId = this.getAttribute('data-comment-id');
            fetch(`/${courseId}/${lectureId}/delete-comment/${commentId}`, {
                method: 'DELETE',
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Something went wrong');
            })
            .then(data => {
                console.log('Comment deleted:', data);
            })
            .catch(error => console.error('Error:', error));
        });
    });

    // Update for delete-comment-btn to set value in modal
    document.querySelectorAll('.delete-comment-btn').forEach(button => {
        button.addEventListener('click', function() {
            const commentId = this.getAttribute('data-comment-id');
            document.getElementById('deleteCommentId').value = commentId;
        });
    });

    // Assignment upload input listener
    const assignmentUploadInput = document.getElementById('assignmentUpload');
    const uploadAssignmentBtn = document.getElementById('uploadAssignmentBtn');
    if (assignmentUploadInput && uploadAssignmentBtn) {
        assignmentUploadInput.addEventListener('change', function() {
            uploadAssignmentBtn.disabled = !this.files.length;
        });
    }

    // Submission upload input listener
    const submissionUploadInput = document.getElementById('submissionUpload');
    const uploadSubmissionBtn = document.getElementById('uploadSubmissionBtn');
    if (submissionUploadInput && uploadSubmissionBtn) {
        submissionUploadInput.addEventListener('change', function() {
            uploadSubmissionBtn.disabled = !this.files.length;
        });
    }
});

</script>